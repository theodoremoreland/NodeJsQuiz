[
  {
    "message": "Which is NOT a key feature of Node.js?",
    "correct_answer_index": 3,
    "choices": [
      "Asynchronous event driven IO helps concurrent request handling",
      "Fast in code execution",
      "Single threaded but highly scalable",
      "Multi-threaded but highly scalable",
      "Node.js library uses JavaScript",
      "No Buffering"
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "What is the Event Loop?",
    "correct_answer_index": 0,
    "choices": [
      "Event Loop is a single thread that performs all the operations asynchronously.",
      "Event Loop is a single thread that performs all the operations synchronously.",
      "Event Loop is a multi-thread that performs all the operations asynchronously.",
      "Event Loop is a multi-thread that performs all the operations synchronously."
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "What is an Event Emitter?",
    "correct_answer_index": 1,
    "choices": [
      "Event Emitter is a single thread that performs all the operations asynchronously.",
      "Event Emitter is a single thread that performs all the operations synchronously.",
      "Event Emitter is a multi-thread that performs all the operations asynchronously.",
      "Event Emitter is a multi-thread that performs all the operations synchronously."
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "What is the purpose of the Buffer class?",
    "correct_answer_index": 0,
    "choices": [
      "Buffer class is used to handle binary data.",
      "Buffer class is used to handle string data.",
      "Buffer class is used to handle number data.",
      "Buffer class is used to handle boolean data."
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "What is piping?",
    "correct_answer_index": 0,
    "choices": [
      "Piping is a mechanism where we provide the output of one stream as the input to another stream.",
      "Piping is a mechanism where we provide the output of one stream as the input to another stream.",
      "Piping is a mechanism where we provide the output of one stream as the input to another stream.",
      "Piping is a mechanism where we provide the output of one stream as the input to another stream."
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "NODE_ENV is used for?",
    "correct_answer_index": 0,
    "choices": [
      "NODE_ENV is an environment variable which is used to specify the environment in which a Node app is executed.",
      "NODE_ENV is an environment variable which is used to specify the environment in which a Node app is executed.",
      "NODE_ENV is an environment variable which is used to specify the environment in which a Node app is executed.",
      "NODE_ENV is an environment variable which is used to specify the environment in which a Node app is executed."
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "The V8 engine...",
    "correct_answer_index": 0,
    "choices": [
      "Is an open source JS engine written in C++. V8 translates JavaScript code into machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler."
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "How does Node.js handle concurrency?",
    "correct_answer_index": 0,
    "choices": [
      "Node.js is a single-threaded application, but it can support concurrency via the concept of event and callbacks. Every API of Node.js is asynchronous and being single-threaded, they use async function calls to maintain concurrency. Node.js uses observer pattern. Node.js thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute."
    ],
    "difficulty": "moderate",
    "topics": ["Standard"]
  },
  {
    "message": "What is npm?",
    "correct_answer_index": 0,
    "choices": [
      "npm is the package manager for JavaScript and the world's largest software registry. Discover packages of reusable code â€” and assemble them in powerful new ways.",
      "npm is a tool for automating web browsers.",
      "npm is a JavaScript-based open-source front-end web application framework mainly maintained by Facebook and a community of individual developers and companies.",
      "npm is a JavaScript runtime built on Chrome's V8 JavaScript engine."
    ],
    "difficulty": "moderate",
    "topics": ["Packages"]
  },
  {
    "message": "What's the difference between dependencies, devDependencies and peerDependencies?",
    "correct_answer_index": 0,
    "choices": [
      "Dependencies are the packages that are required for your project in production.",
      "Dependencies are the packages that are required for your project in production.",
      "Dependencies are the packages that are required for your project in production.",
      "Dependencies are the packages that are required for your project in production."
    ],
    "difficulty": "moderate",
    "topics": ["Packages"]
  },
  {
    "message": "What is the difference between a package.json file and a package-lock.json file?",
    "correct_answer_index": 0,
    "choices": [
      "package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.",
      "package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.",
      "package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates.",
      "package-lock.json is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates."
    ],
    "difficulty": "moderate",
    "topics": ["Packages"]
  },
  {
    "message": "When would you use the npm ci command?",
    "correct_answer_index": 0,
    "choices": [
      "npm ci is a command that helps you run npm install faster and more reliably in continuous integration environments.",
      "npm ci is a command that helps you run npm install faster and more reliably in continuous integration environments.",
      "npm ci is a command that helps you run npm install faster and more reliably in continuous integration environments.",
      "npm ci is a command that helps you run npm install faster and more reliably in continuous integration environments."
    ],
    "difficulty": "moderate",
    "topics": ["Packages"]
  },
  {
    "message": "Which one is NOT a Node.js package manager?",
    "correct_answer_index": 2,
    "choices": ["npm", "yarn", "deno", "pnpm"],
    "difficulty": "moderate",
    "topics": ["Packages"]
  },
  {
    "message": "What is global installation of dependencies",
    "correct_answer_index": 1,
    "choices": [
      "Global installation of dependencies is when you install a package globally so that all the projects can use it.",
      "Global installation of dependencies is when you install a package globally so that you can run it as a command line tool.",
      "Global installation of dependencies is when you install a package globally so that you can use it in your code.",
      "Global installation of dependencies is when you install a package globally so that you can use it in your code."
    ],
    "difficulty": "moderate",
    "topics": ["Packages"]
  },
  {
    "message": "Why should you separate Express 'app' and 'server'?",
    "correct_answer_index": 0,
    "choices": [
      "Separation of concerns. You can test 'app' logic without actually listening on a port.",
      "Separation of concerns. You can test 'app' logic without actually listening on a port.",
      "Separation of concerns. You can test 'app' logic without actually listening on a port.",
      "Separation of concerns. You can test 'app' logic without actually listening on a port."
    ],
    "difficulty": "moderate",
    "topics": ["Express.js", "Web Development"]
  },
  {
    "message": "What is middleware in Express.js?",
    "correct_answer_index": 0,
    "choices": [
      "Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application's request-response cycle."
    ],
    "difficulty": "moderate",
    "topics": ["Express.js", "Web Development"]
  },
  {
    "message": "How do you render plain HTML in Express.js?",
    "correct_answer_index": 0,
    "choices": ["res.sendFile()"],
    "difficulty": "moderate",
    "topics": ["Express.js", "Web Development"]
  },
  {
    "message": "When would you use app.use()?",
    "correct_answer_index": 0,
    "choices": [
      "app.use() is used to mount the specified middleware function(s) at the path which is being specified."
    ],
    "difficulty": "moderate",
    "topics": ["Express.js", "Web Development"]
  },
  {
    "message": "What is Express.js?",
    "correct_answer_index": 0,
    "choices": [
      "A web framework that simplifies Node's web server APIs and makes it easier to organize with middleware and routing"
    ],
    "difficulty": "moderate",
    "topics": ["Express.js", "Web Development"]
  },
  {
    "message": "Differentiate between res.send() and res.json()",
    "correct_answer_index": 0,
    "choices": [
      "res.send() can send any type of response, while res.json() sends a JSON response."
    ],
    "difficulty": "moderate",
    "topics": ["Express.js", "Web Development"]
  },
  {
    "message": "What is scaffolding in Express.js?",
    "correct_answer_index": 0,
    "choices": [
      "Scaffolding is the automatic generation of a basic directory structure for a new application."
    ],
    "difficulty": "moderate",
    "topics": ["Express.js", "Web Development"]
  }
]
